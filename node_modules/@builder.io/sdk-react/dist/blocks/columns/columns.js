"use client";
import * as React from "react";
import { useState } from "react";
import Blocks from "../../components/blocks/blocks";
import { getSizesForBreakpoints } from "../../constants/device-sizes.js";
import InlinedStyles from "../../components/inlined-styles";
import { TARGET } from "../../constants/target.js";
function Columns(props) {
    const [gutterSize, setGutterSize] = useState(() => typeof props.space === "number" ? props.space || 0 : 20);
    const [cols, setCols] = useState(() => props.columns || []);
    const [stackAt, setStackAt] = useState(() => props.stackColumnsAt || "tablet");
    function getWidth(index) {
        return cols[index]?.width || 100 / cols.length;
    }
    function getColumnCssWidth(index) {
        const subtractWidth = (gutterSize * (cols.length - 1)) / cols.length;
        return `calc(${getWidth(index)}% - ${subtractWidth}px)`;
    }
    function getTabletStyle({ stackedStyle, desktopStyle, }) {
        return stackAt === "tablet" ? stackedStyle : desktopStyle;
    }
    function getMobileStyle({ stackedStyle, desktopStyle, }) {
        return stackAt === "never" ? desktopStyle : stackedStyle;
    }
    const [flexDir, setFlexDir] = useState(() => props.stackColumnsAt === "never"
        ? "row"
        : props.reverseColumnsWhenStacked
            ? "column-reverse"
            : "column");
    function columnsCssVars() {
        return {
            "--flex-dir": flexDir,
            "--flex-dir-tablet": getTabletStyle({
                stackedStyle: flexDir,
                desktopStyle: "row",
            }),
        };
    }
    function columnCssVars(index) {
        const gutter = index === 0 ? 0 : gutterSize;
        if (TARGET === "reactNative") {
            return {
                marginLeft: props.stackColumnsAt === "never" ? gutter : 0,
            };
        }
        const width = getColumnCssWidth(index);
        const gutterPixels = `${gutter}px`;
        const mobileWidth = "100%";
        const mobileMarginLeft = 0;
        const marginLeftKey = "marginLeft";
        return {
            width,
            [marginLeftKey]: gutterPixels,
            "--column-width-mobile": getMobileStyle({
                stackedStyle: mobileWidth,
                desktopStyle: width,
            }),
            "--column-margin-left-mobile": getMobileStyle({
                stackedStyle: mobileMarginLeft,
                desktopStyle: gutterPixels,
            }),
            "--column-width-tablet": getTabletStyle({
                stackedStyle: mobileWidth,
                desktopStyle: width,
            }),
            "--column-margin-left-tablet": getTabletStyle({
                stackedStyle: mobileMarginLeft,
                desktopStyle: gutterPixels,
            }),
        };
    }
    function getWidthForBreakpointSize(size) {
        const breakpointSizes = getSizesForBreakpoints(props.builderContext.content?.meta?.breakpoints || {});
        return breakpointSizes[size].max;
    }
    function columnsStyles() {
        return `
        @media (max-width: ${getWidthForBreakpointSize("medium")}px) {
          .${props.builderBlock.id}-breakpoints {
            flex-direction: var(--flex-dir-tablet);
            align-items: stretch;
          }

          .${props.builderBlock.id}-breakpoints > .builder-column {
            width: var(--column-width-tablet) !important;
            margin-left: var(--column-margin-left-tablet) !important;
          }
        }

        @media (max-width: ${getWidthForBreakpointSize("small")}px) {
          .${props.builderBlock.id}-breakpoints {
            flex-direction: var(--flex-dir);
            align-items: stretch;
          }

          .${props.builderBlock.id}-breakpoints > .builder-column {
            width: var(--column-width-mobile) !important;
            margin-left: var(--column-margin-left-mobile) !important;
          }
        },
      `;
    }
    return (React.createElement(React.Fragment, null,
        React.createElement("div", { className: `builder-columns ${props.builderBlock.id}-breakpoints` +
                " div-3ea707d8", style: columnsCssVars(), ...{} },
            TARGET !== "reactNative" ? (React.createElement(React.Fragment, null,
                React.createElement(InlinedStyles, { styles: columnsStyles() }))) : null,
            props.columns?.map((column, index) => (React.createElement("div", { className: "builder-column div-3ea707d8-2", style: columnCssVars(index), ...{}, key: index },
                React.createElement(Blocks, { blocks: column.blocks, path: `component.options.columns.${index}.blocks`, parent: props.builderBlock.id, styleProp: {
                        flexGrow: "1",
                    }, context: props.builderContext, registeredComponents: props.builderComponents }))))),
        React.createElement("style", null, `.div-3ea707d8 {
  display: flex;
  line-height: normal;
}.div-3ea707d8-2 {
  display: flex;
  flex-direction: column;
  align-items: stretch;
}`)));
}
export default Columns;
