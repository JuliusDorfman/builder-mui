"use client";
import * as React from "react";
import { useState } from "react";
import { getBlockComponentOptions } from "../../functions/get-block-component-options.js";
import { getProcessedBlock } from "../../functions/get-processed-block.js";
import BlockStyles from "./components/block-styles";
import { getComponent, getRepeatItemData, isEmptyHtmlElement, } from "./block.helpers.js";
import RepeatedBlock from "./components/repeated-block";
import ComponentRef from "./components/component-ref/component-ref";
import BlockWrapper from "./components/block-wrapper";
function Block(props) {
    function blockComponent() {
        return getComponent({
            block: props.block,
            context: props.context,
            registeredComponents: props.registeredComponents,
        });
    }
    function repeatItem() {
        return getRepeatItemData({
            block: props.block,
            context: props.context,
        });
    }
    function processedBlock() {
        return repeatItem()
            ? props.block
            : getProcessedBlock({
                block: props.block,
                localState: props.context.localState,
                rootState: props.context.rootState,
                rootSetState: props.context.rootSetState,
                context: props.context.context,
                shouldEvaluateBindings: true,
            });
    }
    function Tag() {
        return props.block.tagName || "div";
    }
    function canShowBlock() {
        if ("hide" in processedBlock()) {
            return !processedBlock().hide;
        }
        if ("show" in processedBlock()) {
            return processedBlock().show;
        }
        return true;
    }
    function childrenWithoutParentComponent() {
        /**
         * When there is no `componentRef`, there might still be children that need to be rendered. In this case,
         * we render them outside of `componentRef`.
         * NOTE: We make sure not to render this if `repeatItemData` is non-null, because that means we are rendering an array of
         * blocks, and the children will be repeated within those blocks.
         */
        const shouldRenderChildrenOutsideRef = !blockComponent?.()?.component && !repeatItem();
        return shouldRenderChildrenOutsideRef
            ? processedBlock().children ?? []
            : [];
    }
    function componentRefProps() {
        return {
            blockChildren: processedBlock().children ?? [],
            componentRef: blockComponent?.()?.component,
            componentOptions: {
                ...getBlockComponentOptions(processedBlock()),
                builderContext: props.context,
                ...(blockComponent?.()?.name === "Symbol" ||
                    blockComponent?.()?.name === "Columns"
                    ? {
                        builderComponents: props.registeredComponents,
                    }
                    : {}),
            },
            context: childrenContext,
            registeredComponents: props.registeredComponents,
            builderBlock: processedBlock(),
            includeBlockProps: blockComponent?.()?.noWrap === true,
            isInteractive: !blockComponent?.()?.isRSC,
        };
    }
    const [childrenContext, setChildrenContext] = useState(() => props.context);
    return (React.createElement(React.Fragment, null, canShowBlock() ? (React.createElement(React.Fragment, null, !blockComponent?.()?.noWrap ? (React.createElement(React.Fragment, null,
        isEmptyHtmlElement(Tag()) ? (React.createElement(React.Fragment, null,
            React.createElement(BlockWrapper, { Wrapper: Tag(), block: processedBlock(), context: props.context, hasChildren: false }))) : null,
        !isEmptyHtmlElement(Tag()) && repeatItem() ? (React.createElement(React.Fragment, null, repeatItem()?.map((data, index) => (React.createElement(RepeatedBlock, { key: index, repeatContext: data.context, block: data.block, registeredComponents: props.registeredComponents }))))) : null,
        !isEmptyHtmlElement(Tag()) && !repeatItem() ? (React.createElement(React.Fragment, null,
            React.createElement(BlockWrapper, { Wrapper: Tag(), block: processedBlock(), context: props.context, hasChildren: true },
                React.createElement(ComponentRef, { ...componentRefProps() }),
                childrenWithoutParentComponent()?.map((child) => (React.createElement(Block, { key: "block-" + child.id, block: child, context: childrenContext, registeredComponents: props.registeredComponents }))),
                childrenWithoutParentComponent()?.map((child) => (React.createElement(BlockStyles, { key: "block-style-" + child.id, block: child, context: childrenContext })))))) : null)) : (React.createElement(React.Fragment, null,
        React.createElement(ComponentRef, { ...componentRefProps() }))))) : null));
}
export default Block;
