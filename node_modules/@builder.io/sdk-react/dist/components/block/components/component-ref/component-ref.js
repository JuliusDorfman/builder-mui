"use client";
import * as React from "react";
import { useState } from "react";
import BlockStyles from "../block-styles";
import Block from "../../block";
import InteractiveElement from "../interactive-element";
import { getWrapperProps } from "./component-ref.helpers.js";
function ComponentRef(props) {
    const [Wrapper, setWrapper] = useState(() => props.isInteractive ? InteractiveElement : props.componentRef);
    return (React.createElement(React.Fragment, null, props.componentRef ? (React.createElement(React.Fragment, null,
        React.createElement(Wrapper, { ...getWrapperProps({
                componentOptions: props.componentOptions,
                builderBlock: props.builderBlock,
                context: props.context,
                componentRef: props.componentRef,
                includeBlockProps: props.includeBlockProps,
                isInteractive: props.isInteractive,
                contextValue: props.context,
            }) },
            props.blockChildren?.map((child) => (React.createElement(Block, { key: "block-" + child.id, block: child, context: props.context, registeredComponents: props.registeredComponents }))),
            props.blockChildren?.map((child) => (React.createElement(BlockStyles, { key: "block-style-" + child.id, block: child, context: props.context })))))) : null));
}
export default ComponentRef;
