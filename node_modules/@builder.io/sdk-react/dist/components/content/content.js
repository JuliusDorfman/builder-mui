"use client";
import * as React from "react";
import { useState } from "react";
import { getDefaultRegisteredComponents } from "../../constants/builder-registered-components.js";
import { components, serializeComponentInfo, } from "../../functions/register-component.js";
import Blocks from "../blocks/blocks";
import ContentStyles from "./components/styles";
import { getContentInitialValue, getContextStateInitialValue, } from "./content.helpers.js";
import { TARGET } from "../../constants/target.js";
import { getRenderContentScriptString } from "../content-variants/helpers.js";
import EnableEditor from "./components/enable-editor";
import InlinedScript from "../inlined-script";
import ComponentsContext from "../../context/components.context.js";
function ContentComponent(props) {
    const [scriptStr, setScriptStr] = useState(() => getRenderContentScriptString({
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-non-null-asserted-optional-chain
        variationId: props.content?.testVariationId,
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-non-null-asserted-optional-chain
        contentId: props.content?.id,
    }));
    function contentSetState(newRootState) {
        setBuilderContextSignal((PREVIOUS_VALUE) => ({
            ...PREVIOUS_VALUE,
            rootState: newRootState,
        }));
    }
    const [registeredComponents, setRegisteredComponents] = useState(() => [
        ...getDefaultRegisteredComponents(),
        // While this `components` object is deprecated, we must maintain support for it.
        // Since users are able to override our default components, we need to make sure that we do not break such
        // existing usage.
        // This is why we spread `components` after the default Builder.io components, but before the `props.customComponents`,
        // which is the new standard way of providing custom components, and must therefore take precedence.
        ...components,
        ...(props.customComponents || []),
    ].reduce((acc, { component, ...info }) => ({
        ...acc,
        [info.name]: {
            component: component,
            ...serializeComponentInfo(info),
        },
    }), {}));
    const [builderContextSignal, setBuilderContextSignal] = useState(() => ({
        content: getContentInitialValue({
            content: props.content,
            data: props.data,
        }),
        localState: undefined,
        rootState: getContextStateInitialValue({
            content: props.content,
            data: props.data,
            locale: props.locale,
        }),
        rootSetState: contentSetState,
        context: props.context || {},
        apiKey: props.apiKey,
        apiVersion: props.apiVersion,
        componentInfos: [
            ...getDefaultRegisteredComponents(),
            // While this `components` object is deprecated, we must maintain support for it.
            // Since users are able to override our default components, we need to make sure that we do not break such
            // existing usage.
            // This is why we spread `components` after the default Builder.io components, but before the `props.customComponents`,
            // which is the new standard way of providing custom components, and must therefore take precedence.
            ...components,
            ...(props.customComponents || []),
        ].reduce((acc, { component: _, ...info }) => ({
            ...acc,
            [info.name]: serializeComponentInfo(info),
        }), {}),
        inheritedStyles: {},
    }));
    return (React.createElement(ComponentsContext.Provider, { value: {
            registeredComponents: registeredComponents,
        } },
        React.createElement(EnableEditor, { content: props.content, model: props.model, context: props.context, apiKey: props.apiKey, canTrack: props.canTrack, locale: props.locale, includeRefs: props.includeRefs, enrich: props.enrich, classNameProp: props.classNameProp, showContent: props.showContent, builderContextSignal: builderContextSignal, ...{
                setBuilderContextSignal: setBuilderContextSignal,
            } },
            props.isSsrAbTest ? (React.createElement(React.Fragment, null,
                React.createElement(InlinedScript, { scriptStr: scriptStr }))) : null,
            TARGET !== "reactNative" ? (React.createElement(React.Fragment, null,
                React.createElement(ContentStyles, { contentId: builderContextSignal.content?.id, cssCode: builderContextSignal.content?.data?.cssCode, customFonts: builderContextSignal.content?.data?.customFonts }))) : null,
            React.createElement(Blocks, { blocks: builderContextSignal.content?.data?.blocks, context: builderContextSignal, registeredComponents: registeredComponents }))));
}
export default ContentComponent;
